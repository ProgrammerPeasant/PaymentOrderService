import React, { useState, useEffect, useRef } from 'react';
import * as api from './apiService'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å
import './App.css'; // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è react-toastify
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function App() {
    const [userId, setUserId] = useState('user-123'); // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const [balance, setBalance] = useState(null);
    const [orders, setOrders] = useState([]);
    const [depositAmount, setDepositAmount] = useState(100);
    const [message, setMessage] = useState(''); // –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å

    const ws = useRef(null); // useRef –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ WebSocket

    const showMessage = (msg, isError = false) => {
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å toast –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É —Å–∏—Å—Ç–µ–º—É –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö
        if (isError) {
            toast.error(msg);
        } else {
            toast.success(msg);
        }
        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π setMessage –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –Ω–µ-toast —Å–æ–æ–±—â–µ–Ω–∏–π
        // setMessage({ text: msg, error: isError });
        // setTimeout(() => setMessage(''), 3000);
    };

    // --- WebSocket Logic ---
    useEffect(() => {
        if (!userId) {
            if (ws.current) {
                console.log('Closing WebSocket due to empty userId.');
                ws.current.close();
                ws.current = null;
            }
            return;
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ userId –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (ws.current) {
            console.log('Closing previous WebSocket connection.');
            ws.current.close();
        }

        // URL –≤–∞—à–µ–≥–æ API Gateway –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ WebSocket
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 8080 - —ç—Ç–æ –ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ API Gateway
        const wsUrl = `ws://localhost:8080/ws/order-status?userId=${encodeURIComponent(userId)}`;
        console.log(`Attempting to connect to WebSocket: ${wsUrl}`);
        ws.current = new WebSocket(wsUrl);

        ws.current.onopen = () => {
            console.log(`WebSocket connected for userId: ${userId}`);
            toast.info(`üîî Connected for order updates (User: ${userId})`);
        };

        ws.current.onmessage = (event) => {
            console.log('WebSocket message received:', event.data);
            try {
                const orderUpdate = JSON.parse(event.data); // –û–∂–∏–¥–∞–µ–º OrderResponse –≤ JSON

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ orderUpdate —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è id –∏ status
                const notificationMessage = `–ó–∞–∫–∞–∑ #${orderUpdate.id.substring(0, 8)} –æ–±–Ω–æ–≤–ª–µ–Ω: ${orderUpdate.status}`;
                toast.success(notificationMessage);

                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                setOrders(prevOrders => {
                    const orderExists = prevOrders.find(o => o.id === orderUpdate.id);
                    if (orderExists) {
                        return prevOrders.map(o => o.id === orderUpdate.id ? {...o, ...orderUpdate} : o);
                    } else {
                        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–æ–≤—ã–π –∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –º–æ–∂–Ω–æ –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å
                        // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä—É—á–Ω—É—é/–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        // –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å handleGetOrders() –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ
                        return prevOrders;
                    }
                });

            } catch (error) {
                console.error('Failed to parse WebSocket message or show toast:', error);
                toast.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.");
            }
        };

        ws.current.onerror = (error) => {
            console.error('WebSocket error:', error);
            toast.error('–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.');
        };

        ws.current.onclose = (event) => {
            console.log(`WebSocket disconnected for userId: ${userId}. Clean: ${event.wasClean}, Code: ${event.code}, Reason: ${event.reason}`);
            if (!event.wasClean) {
                toast.warn(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ—Ç–µ—Ä—è–Ω–æ (User: ${userId})`);
            }
            ws.current = null; // –û—á–∏—â–∞–µ–º ref –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        };

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏: –∑–∞–∫—Ä—ã—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ —Å–º–µ–Ω–µ userId
        return () => {
            if (ws.current) {
                console.log(`Closing WebSocket connection for userId: ${userId} on cleanup.`);
                ws.current.close();
                ws.current = null;
            }
        };
    }, [userId]); // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –µ—Å–ª–∏ userId –∏–∑–º–µ–Ω–∏–ª—Å—è

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—á–µ—Ç–æ–≤ --- (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const handleCreateAccount = async () => {
        try {
            const response = await api.createAccount(userId);
            showMessage(`–°—á–µ—Ç –¥–ª—è ${response.data.userId} —Å–æ–∑–¥–∞–Ω!`);
            handleGetBalance();
        } catch (error) {
            showMessage(`–û—à–∏–±–∫–∞: ${error.response?.status === 409 ? '–°—á–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : error.message}`, true);
        }
    };

    const handleGetBalance = async () => {
        if (!userId) return;
        try {
            const response = await api.getAccountBalance(userId);
            setBalance(response.data.balance);
        } catch (error) {
            setBalance(null);
            showMessage(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å—á–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`, true);
        }
    };

    const handleDeposit = async () => {
        try {
            const response = await api.depositToAccount(userId, parseFloat(depositAmount));
            setBalance(response.data.balance);
            showMessage(`–°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${depositAmount}!`);
        } catch (error) {
            showMessage(`–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`, true);
        }
    };

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ---
    const handleCreateOrder = async () => {
        const orderData = {
            items: [{
                productId: `prod-${Date.now()}`,
                quantity: 1,
                pricePerUnit: Math.floor(Math.random() * 100) + 10
            }]
        };
        try {
            await api.createOrder(userId, orderData);
            showMessage('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! (–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ)');
            // –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å handleGetOrders —Å—Ä–∞–∑—É, —Ç.–∫. –ø—Ä–∏–¥–µ—Ç WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            // setTimeout(handleGetOrders, 2000);
        } catch (error) {
            showMessage(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${error.message}`, true);
        }
    };

    const handleGetOrders = async () => {
        if (!userId) return;
        try {
            const response = await api.getUserOrders(userId);
            setOrders(response.data);
        } catch (error) {
            setOrders([]);
            showMessage(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: ${error.message}`, true);
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ userId –∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        if (userId) { // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å userId
            handleGetBalance();
            handleGetOrders();
        } else { // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ userId –ø—É—Å—Ç
            setBalance(null);
            setOrders([]);
        }
    }, [userId]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç userId –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    return (
        <div className="App">
            {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π react-toastify */}
            <ToastContainer
                position="top-right"
                autoClose={5000}
                hideProgressBar={false}
                newestOnTop
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                theme="colored" // –∏–ª–∏ "light", "dark"
            />

            <header className="App-header">
                <h1>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Å—á–µ—Ç–∞–º–∏</h1>
                <div className="user-input">
                    <label htmlFor="userId">ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </label>
                    <input
                        id="userId"
                        type="text"
                        value={userId}
                        onChange={(e) => setUserId(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ User ID"
                    />
                </div>
                {/* –°—Ç–∞—Ä—ã–π –±–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –≤—Å–µ —á–µ—Ä–µ–∑ toast */}
                {/* {message && <div className={`message ${message.error ? 'error' : 'success'}`}>{message.text}</div>} */}
            </header>

            <main className="container">
                {/* –°–µ–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–º –∏ –∑–∞–∫–∞–∑–∞–º–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ JSX —Å—Ç—Ä—É–∫—Ç—É—Ä–µ */}
                <section className="card">
                    <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–º</h2>
                    <div className="balance-display">
                        –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <strong>{balance !== null ? `${balance.toFixed(2)} —É.–µ.` : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong>
                    </div>
                    <div className="actions">
                        <button onClick={handleCreateAccount}>–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç</button>
                        <button onClick={handleGetBalance}>–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å</button>
                    </div>
                    <div className="actions">
                        <input
                            type="number"
                            value={depositAmount}
                            onChange={(e) => setDepositAmount(e.target.value)}
                        />
                        <button onClick={handleDeposit}>–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç</button>
                    </div>
                </section>

                <section className="card">
                    <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ó–∞–∫–∞–∑–∞–º–∏</h2>
                    <div className="actions">
                        <button onClick={handleCreateOrder}>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–∫–∞–∑</button>
                        <button onClick={handleGetOrders}>–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</button>
                    </div>

                    <div className="order-list">
                        <h3>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:</h3>
                        {orders.length > 0 ? (
                            <ul>
                                {orders.map(order => (
                                    <li key={order.id}>
                                        ID: {order.id.substring(0,8)}...,
                                        –°—Ç–∞—Ç—É—Å: <strong style={{color: order.status === 'PAID' ? 'green' : (order.status === 'PENDING_PAYMENT' ? 'orange' : 'black')}}>{order.status}</strong>,
                                        –°—É–º–º–∞: {order.totalAmount}
                                        {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å createdAt, updatedAt –µ—Å–ª–∏ –Ω—É–∂–Ω–æ */}
                                    </li>
                                ))}
                            </ul>
                        ) : (
                            <p>–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω.</p>
                        )}
                    </div>
                </section>
            </main>
        </div>
    );
}

export default App;