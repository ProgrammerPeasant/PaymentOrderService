version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: microservices-postgres
    ports:
      - "5432:5432" # Expose DB port to host for local tools if needed
    environment:
      POSTGRES_DB: microservices_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist data
    networks:
      - microservices-net

  zookeeper: # Required by Kafka
    image: confluentinc/cp-zookeeper:7.5.3 # Use a recent version
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-net

  kafka:
    image: confluentinc/cp-kafka:7.5.3 # Use a recent version
    container_name: kafka
    ports:
      - "9092:9092" # For clients within docker network
      - "29092:29092" # For clients outside docker network (e.g. your host machine for dev)
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 # For Confluent images
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1 # For Confluent images
      # For automatic topic creation if needed, though better to create them explicitly or let services create them
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - microservices-net

  orders-service:
    build: ./orders-service
    container_name: orders-service
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/microservices_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # or validate in prod
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SERVER_PORT: 8081
    networks:
      - microservices-net

  payments-service:
    build: ./payments-service
    container_name: payments-service
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/microservices_db
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # or validate in prod
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SERVER_PORT: 8082
    networks:
      - microservices-net

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - orders-service
      - payments-service
    environment:
      SERVER_PORT: 8080
      # Ensure gateway's application.properties points to service names for Docker internal DNS
      # e.g., spring.cloud.gateway.routes[0].uri=http://orders-service:8081
      # The properties file for api-gateway needs to be adjusted for Docker:
      # SPRING_CLOUD_GATEWAY_ROUTES_0_URI: http://orders-service:8081
      # SPRING_CLOUD_GATEWAY_ROUTES_1_URI: http://payments-service:8082
      # SPRINGDOC_SWAGGER-UI_URLS_0_URL: /orders-service-docs/v3/api-docs
      # SPRINGDOC_SWAGGER-UI_URLS_1_URL: /payments-service-docs/v3/api-docs
      # SPRING_CLOUD_GATEWAY_ROUTES_2_URI: http://orders-service:8081 # for orders api-docs proxy
      # SPRING_CLOUD_GATEWAY_ROUTES_3_URI: http://payments-service:8082 # for payments api-docs proxy
      # SPRING_CLOUD_GATEWAY_ROUTES_4_URI: http://orders-service:8081 # for orders swagger-ui resources proxy
      # SPRING_CLOUD_GATEWAY_ROUTES_5_URI: http://payments-service:8082 # for payments swagger-ui resources proxy
      # This can be done by creating a docker specific profile in api-gateway, e.g. application-docker.properties
      # And then activate it with SPRING_PROFILES_ACTIVE=docker
      SPRING_PROFILES_ACTIVE: docker # We will create application-docker.properties for the gateway
    networks:
      - microservices-net

  frontend:
    build:
      context: ./frontend # Указываем путь к папке с фронтендом
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80" # Маппим порт 3000 на хосте на порт 80 в контейнере (Nginx)
    depends_on:
      - api-gateway # Фронтенд зависит от гейтвея

volumes:
  postgres_data:

networks:
  microservices-net:
    driver: bridge